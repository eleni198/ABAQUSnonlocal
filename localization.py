#  Script to generate the whole input filefrom abaqus import *from abaqusConstants import *session.Viewport(name='Viewport: 1', origin=(0.0, 0.0), width=198.046875,     height=193.06640625)session.viewports['Viewport: 1'].makeCurrent()session.viewports['Viewport: 1'].maximize()from caeModules import *import mathimport os# geometrical parametersbase = 25.0height = 50.0#base = 1.0#height = 1.0# Number of elementsN = 100.#N = 1# Specimen heightH = 50.# Element Sizeelsize  = H/Ndelsize = 0.1*elsize# Specimen RadiusR = elsize# Elastic properties# GasbetonE     = 60.0E3nu    = 0.15alpha = 1.3beta  = 2.0Mf    = 2.0cc    = 1.0mm    =-0.2rhos  = 10.75ksis  =-0.0rhom  = 1.25ksim  =-1.0pc0   = 3.9e3eta   = 1.0e4## Calcarenite#E     = 42.0E3#nu    = 0.17#alpha = 1.6#beta  = 1.0#Mf    = 2.2#cc    = 0.8#mm    =-0.2#rhos  = 23.0#ksis  =-0.0#rhom  = 1.0#ksim  =-0.0#pc0   = 2.0e3#eta   = 1.0e9## Pumice#E     = 450.0E3#nu    = 0.07#alpha = 0.0#beta  = 1.0#Mf    = 2.2#cc    = 1.0#mm    =-0.5#rhos  = 6.0#ksis  =-0.0#rhom  = 1.0#ksim  =-0.5#pc0   = 20.0e3#eta   = 1.0e4# Just hardening#E     = 60.0E3#nu    = 0.15#alpha = 1.3#beta  = 2.0#Mf    = 2.0#cc    = 1.0#mm    =-0.2#rhos  = 10.75#ksis  = 0.0#rhom  = 0.0#ksim  = 0.0#pc0   = 3.9e3#eta   = 1.0e4# MaastrichtE     = 1000.0E3E     = 500.0E3nu    = 0.12alpha = 0.5beta  = 0.7Mf    = 1.3cc    = 1.0mm    =-0.05rhos  = 20# changing this to get softeningrhos  = 10.0ksis  = 0.2rhom  = 0.75# changind this to get softeningrhom  = 5.0ksim  = -1.5pc0   = 6.00e3eta   = 1.0e9aa    = 0.8bb    = 0.9c     = 1.0# chamging this to get isotropy#aa    = 1.0#bb    = 1.0#c     = 1.0i      = 2.0  # das heisst M(2,2) = 1.0alphag = 0.7 # sind unwichtig, da das nichtassozierte in der umat ausgeschaltet istbetag  = 0.3 # sind unwichtig, da das nichtassozierte in der umat ausgeschaltet istMg     = 1.35 # sind unwichtig, da das nichtassozierte in der umat ausgeschaltet istap     = 0.6 # sind unwichtig, da das nichtassozierte in der umat ausgeschaltet ist# adding the necessary properties for the non local model# Total number of materials to be evaluated non locallytotalNumberOfMaterials =1# material identifiernmats = [1]# example for more materials: nmat = [1,2,3,...]# characteristic lengthl_c  = [0.5]# example for more materials: l_c = [1,2,3,...]# number of state variablesstv  = [36]# example for more materials: stv = [14,12,3,...]# value for the non local approach using the Vermeen-Brinkgreve approachmnl = 0.5mat_table = (E,nu,alpha, beta, Mf, cc,mm,rhos,ksis,rhom,ksim,pc0,nmats[0],l_c[0],mnl,eta,aa,bb,c,i,alphag,betag,Mg,ap)friclim  = 10e3isopress = 10.0      gamma = 17.0 jobName = 'localization'workDirectoryPath = os.getcwd()os.chdir(workDirectoryPath)   # Work directoryprint "Work directory: " +workDirectoryPathimport sys                      # this three lines import a module from the work directorysys.path.append( workDirectoryPath ) #mdb.saveAs(pathName='D:/users/grandas/proj/twoBVPs/1BVP/1BVP.cae')session.viewports['Viewport: 1'].setValues(displayedObject=None)myModel = mdb.Model(name='Model-1')s = myModel.ConstrainedSketch(name='__profile__', sheetSize=200.0)g, v, d, c = s.geometry, s.vertices, s.dimensions, s.constraintss.setPrimaryObject(option=STANDALONE)s.rectangle(point1=(0.0, 0.0), point2=(base , height))p = myModel.Part(name='Part-1', dimensionality=TWO_D_PLANAR,     type=DEFORMABLE_BODY)p.BaseShell(sketch=s)s.unsetPrimaryObject()session.viewports['Viewport: 1'].setValues(displayedObject=p)del mdb.models['Model-1'].sketches['__profile__']# Setsp = myModel.parts['Part-1']e = p.edgesindex = e.findAt((base/2.0,height,0)).indexp.Set(edges=e[index: index+1], name='top')p.Surface(side2Edges=e[index:index+1], name='Surf-top') index = e.findAt((base/2.0,0,0)).indexp.Set(edges=e[index: index+1], name='bottom')p.Surface(side2Edges=e[index:index+1], name='Surf-bottom') index = e.findAt((0,height/2,0)).indexp.Set(edges=e[index: index+1], name='left')p.Surface(side2Edges=e[index:index+1], name='Surf-left') index = e.findAt((base,height/2,0)).indexp.Set(edges=e[index: index+1], name='right')p.Surface(side2Edges=e[index:index+1], name='Surf-right') index = p.faces.findAt((base/2.0,height/2.0,0),).indexp.Set(faces=p.faces[index: index+1], name='All')e = p.edgesindex = e.findAt((base/2.0,height,0)).indexp.PartitionEdgeByParam(edges=e[index: index+1], parameter=0.5)v = p.verticesindex = v.findAt( (base/2.0,height,0),).indexp.Set(vertices=v[index: index+1], name='Top-Mid')#------------------------------------- M  A T E R I A L   ------------------------------------------------------------------import material# The permeability is in m/s - so actually conductivity. a typical value would be 10^-8Mat1 = myModel.Material(name='elastic')Mat1.Density(table=((2.500, ), ))Mat1.Elastic(table=((E, nu), ))#Mat1.Permeability(specificWeight=10.000, table =((0.10001, 0.3, ), ))Mat2 = myModel.Material(name='user')Mat2.Density(table=((2.500, ), ))Mat2.UserMaterial(type=MECHANICAL,unsymm=ON, mechanicalConstants = mat_table)#Mat2.Permeability(specificWeight=10000, table =((0.000001, 0.3, ), ))Mat2.Depvar(n=stv[0])#------------------------------------- S O L I D   S E C T I O N  ------------------------------------------------------------------myModel.HomogeneousSolidSection(name='soilSection', material='user' )region = (p.sets['All'].faces,)p.SectionAssignment(region=region,sectionName='soilSection')#-------------------------------------   I N S T A N C E S------------------------------------------------------------------myAssembly = myModel.rootAssemblysoilInstance = myAssembly.Instance(name='soilInstance', part=p, dependent=OFF)#-------------------------------------   B O U N D A R Y   C O N D I T I O N S-----------------------------------------------------------------	# topMidregion = soilInstance.sets['Top-Mid']myModel.DisplacementBC(name='Top-MidPinned', createStepName='Initial',     region=region, u1=SET, u2=UNSET, u3=UNSET, ur1=UNSET, ur2=UNSET, ur3=UNSET,     amplitude=UNSET, distributionType=UNIFORM, fieldName='', localCsys=None)	# topregion = soilInstance.sets['top']myModel.DisplacementBC(name='TopPinned', createStepName='Initial',     region=region, u1=UNSET, u2=SET, u3=UNSET, ur1=UNSET, ur2=UNSET, ur3=UNSET,     amplitude=UNSET, distributionType=UNIFORM, fieldName='', localCsys=None)	# bottomregion = soilInstance.sets['bottom']myModel.DisplacementBC(name='BottomPinned', createStepName='Initial',     region=region, u1=UNSET, u2=SET, u3=UNSET, ur1=UNSET, ur2=UNSET, ur3=UNSET,     amplitude=UNSET, distributionType=UNIFORM, fieldName='', localCsys=None)	# # Left u1=0# region = soilInstance.sets['left']# myModel.DisplacementBC(name='LeftPinned', createStepName='Initial',     # region=region, u1=SET, u2=UNSET, u3=UNSET, ur1=UNSET, ur2=UNSET, ur3=UNSET,     # amplitude=UNSET, distributionType=UNIFORM, fieldName='', localCsys=None)# # Right u1=0# region = soilInstance.sets['right']# myModel.DisplacementBC(name='RightPinned', createStepName='Initial',     # region=region, u1=SET, u2=UNSET, u3=UNSET, ur1=UNSET, ur2=UNSET, ur3=UNSET,     # amplitude=UNSET, distributionType=UNIFORM, fieldName='', localCsys=None)	#-------------------------------------   M E S H -----------------------------------------------------------------		import meshpartInstances =(soilInstance, )#myAssembly.seedPartInstance(regions=partInstances, size=height/28.0, deviationFactor=0.1)myAssembly.seedPartInstance(regions=partInstances, size=elsize, deviationFactor=0.5)region = soilInstance.sets['All'].facesmyAssembly.setMeshControls(regions=region, elemShape=QUAD, technique=STRUCTURED)#myAssembly.setMeshControls(regions=region, elemShape=QUAD_DOMINATED, technique=FREE)myAssembly.generateMesh(regions=(soilInstance,))elemTypeCPE4 = mesh.ElemType(elemCode=CPS4, elemLibrary=STANDARD,     secondOrderAccuracy=OFF, distortionControl=DEFAULT)elemTypeCPE8R = mesh.ElemType(elemCode=CPE8R, elemLibrary=STANDARD,     secondOrderAccuracy=OFF, distortionControl=DEFAULT)elemTypeCPE6M = mesh.ElemType(elemCode=CPE6M, elemLibrary=STANDARD,     distortionControl=DEFAULT)	elemTypeCPE3 = mesh.ElemType(elemCode=CPE3, elemLibrary=STANDARD,     distortionControl=DEFAULT)				region = (soilInstance.sets['All'].faces, )#myAssembly.setElementType(regions=region, elemTypes=(elemTypeCPE4,elemTypeCPE3))#myAssembly.setElementType(regions=region, elemTypes=(elemTypeCPE4,))myAssembly.setElementType(regions=region, elemTypes=(elemTypeCPE8R,))		#-------------------------------------   I N I T I A L   C O N D I T I O N S -----------------------------------------------------------------				myModel.keywordBlock.synchVersions(storeNodesAndElements=False)iIC= len(myModel.keywordBlock.sieBlocks) -1  # Indice for Initial Conditions			#---------------------------------------------------------------------------------------------#                 S T E P  1#---------------------------------------------------------------------------------------------	previousStepName = 'Initial'stepName = 'Geostatic'myModel.StaticStep(name=stepName, previous=previousStepName,     description='Geostatic equilibrium')print 'Step: '+ stepName		region = soilInstance.surfaces['Surf-right']myModel.Pressure(name='Lateral right load', createStepName=stepName,     region=region, distributionType=UNIFORM, field='', magnitude=isopress,     amplitude=UNSET)region = soilInstance.surfaces['Surf-left']myModel.Pressure(name='Surface left load', createStepName='Geostatic',     region=region, distributionType=UNIFORM, field='', magnitude=isopress,     amplitude=UNSET)		# region = soilInstance.surfaces['Surf-corner']# myModel.Pressure(name='Surface corner load', createStepName='Geostatic',     # region=region, distributionType=UNIFORM, field='', magnitude=100,     # amplitude=UNSET)		#myModel.steps[stepName].Restart(frequency=100, overlay=ON )myModel.fieldOutputRequests['F-Output-1'].setValues(variables=('U','S','SDV','E'))myModel.keywordBlock.synchVersions(storeNodesAndElements=False)iFile1= len(myModel.keywordBlock.sieBlocks) -1  # Indice for write output file#---------------------------------------------------------------------------------------------#                 S T E P  2#---------------------------------------------------------------------------------------------	previousStepName = stepNamestepName = 'Loading'period=3600myModel.StaticStep(name='Loading', previous=previousStepName, description='main step',     timePeriod=period,matrixStorage=UNSYMMETRIC,noStop=ON,initialInc=period/7200.0,	 minInc=0.000000001, maxInc=period/7200.0, maxNumInc=100000000)	print 'Step: '+ stepName		# topmyModel.boundaryConditions['TopPinned'].setValuesInStep(    stepName=stepName, u2=-0.1*height)	myModel.steps[stepName].control.setValues(allowPropagation=OFF,     resetDefaultValues=OFF, displacementField=(5e-03, 0.1, 0.0, 0.0, 0.02,     1e-05, 0.001, 1e-08, 1.0, 1e-05, 1e-08), electricalPotentialField=(1e-08,     0.01, 0.0, 0.0, 0.02, 1e-05, 0.001, 1e-08, 1.0, 1e-05),     hydrostaticFluidPressureField=(1e-08, 0.01, 0.0, 0.0, 0.02, 1e-05, 0.001,     1e-08, 1.0, 1e-05), rotationField=(1e-08, 0.01, 0.0, 0.0, 0.02, 1e-05,     0.001, 1e-08, 1.0, 1e-05))	myModel.fieldOutputRequests['F-Output-1'].setValues(timeInterval=10.0,variables=('S','E','PEMAG','U','RF','CF','SDV','UVARM')) 	#-------------------------------------  K E Y W O R D   B L O C K -----------------------------------------------------------------# Initial ConditionsmyModel.keywordBlock.synchVersions(storeNodesAndElements=False)	iIC = iIC -6  # why????myModel.keywordBlock.insert(iIC,"**-------------------------------------------\n")myModel.keywordBlock.insert(iIC+1,"*INITIAL CONDITIONS, TYPE=STRESS, USER\n")myModel.keywordBlock.insert(iIC+2,"*INITIAL CONDITIONS, TYPE=SOLUTION, USER\n")myModel.keywordBlock.insert(iIC+3,"**-------------------------------------------\n")	# Write output filemyModel.keywordBlock.synchVersions(storeNodesAndElements=False)	iFile = iFile1 myModel.keywordBlock.insert(iFile,"**-------------------------------------------\n")myModel.keywordBlock.insert(iFile+1,"*EL FILE, POSITION=INTEGRATION POINTS\n")myModel.keywordBlock.insert(iFile+2,"COORD\n")myModel.keywordBlock.insert(iFile+3,"**-------------------------------------------\n")#-------------------------------------  W R I T E   F I L E  -----------------------------------------------------------------# WRITE MODEL SIZEtotalNumberOfNodes =len(myModel.rootAssembly.instances['soilInstance'].nodes)totalNumberOfElements =len(myModel.rootAssembly.instances['soilInstance'].elements)try:	f=open('modelSize.txt','w')except IOError, e:	print "I cannot open the file modelSize.txt. " + str(e)f.write(str(totalNumberOfElements)+'\tTotal number of elements\n')f.write(str(totalNumberOfNodes)+'\tTotal number of nodes\n')f.write(str(totalNumberOfMaterials)+'\tTotal number of materials\n')for i in range(0,totalNumberOfMaterials):   f.write(str(l_c[i])+'\t'+str(stv[i])+'\tCh. length and # of state variables of material '+str(i+1)+'\n')f.write('Size of Model\n')f.close()#-------------------------------------  J O B -----------------------------------------------------------------mdb.Job(name=jobName, model='Model-1', type=ANALYSIS,     explicitPrecision=SINGLE, nodalOutputPrecision=SINGLE,     description='',     parallelizationMethodExplicit=DOMAIN, multiprocessingMode=DEFAULT,     numDomains=1, userSubroutine='', numCpus=1,        scratch='', echoPrint=OFF, modelPrint=OFF,     contactPrint=OFF, historyPrint=OFF)	pathName = workDirectoryPath + '\\'+jobNamemdb.saveAs(pathName=pathName)mdb.jobs[jobName].writeInput(consistencyChecking=ON)#Submittmdb.jobs[jobName].setValues(userSubroutine='head.for')mdb.jobs[jobName].submit(consistencyChecking=OFF)#mdb.jobs[jobName].waitForCompletion()